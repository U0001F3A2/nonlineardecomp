

Read(Concatenation(DirectoryAnalysis, "adversary/find_generating_set.g"));
Read(Concatenation(DirectoryAnalysis, "adversary/find_key.g"));
Read(Concatenation(DirectoryAnalysis, "adversary/word_solve.g"));

# G is a (polycyclic) group type generated by (or created by) modding out freegroup)
# phi is an endomorphism of G

nonlinear_decomposition := function(G,endomorphism,gm,gn,g) local gen_set, gm_in_terms_of_gen_set, shared_key, TimeStart, TimeSpent, thisShouldBeGm,i;

	TimeStart := Runtime();
	
	gen_set := find_generating_set(G,endomorphism,g);
	gm_in_terms_of_gen_set := word_solve(G,gen_set,gm);
	
	thisShouldBeGm := gm^0;
	for i in [1..Length(gm_in_terms_of_gen_set)] do
		if gm_in_terms_of_gen_set[i] < 0 then
			thisShouldBeGm := thisShouldBeGm * gen_set[-gm_in_terms_of_gen_set[i]]^-1;
		else
			thisShouldBeGm := thisShouldBeGm * gen_set[gm_in_terms_of_gen_set[i]];
		fi;
	od;
	
	Print("Is gm well-represented?\n");
	Print(gm = thisShouldBeGm);
	Print("\n");
	
	shared_key := find_key(G,endomorphism,gen_set,gm_in_terms_of_gen_set,gn);
	
	TimeSpent := Runtime() - TimeStart;
	Print("Time Adversary: ");
	Print(TimeSpent);
	Print("\n");
	
	return shared_key;
end;